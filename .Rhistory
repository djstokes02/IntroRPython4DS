# Install needed Python packages
py_install(c(
"pandas",
"numpy",
"matplotlib",
"seaborn",
"plotly",
"scikit-learn",
"jupyter"
))
reticulate::repl_python()
## Drop the review_number column from the ramen dataframe
ramen = ramen.drop(columns = ['review_number'])
ramen.drop(columns = ['review_number'])
ramen.drop(columns = 'review_number')
## Drop the review_number column from the ramen dataframe
ramen = ramen.drop('review_number')
## Drop the review_number column from the ramen dataframe
ramen = ramen.drop(['review_number'])
## Drop the review_number column from the ramen dataframe
ramen = ramen.drop(columns = ['review_number'])
reticulate::repl_python()
# Using a for loop to create a new group
for(i in 1:nrow(Marine6))
{
if(Marine6$Common.Name[i] %in% c("American lobster","Rainbow star"))
{ Marine6$Group[i] = "Other" }
else if(is.na(Marine6$Common.Name[i]))
{ Marine6$Group[i] = NA }
else
{ Marine6$Group[i] = "Fish" }
}
# read in the Marine6 dataset using base R
# convert characters to factors upon reading in
Marine6 <- read.csv("Marine6.csv", stringsAsFactors = TRUE )
# find the minimum value for the variable "Year"
# aka, the earliest recordings
min(Marine6$Year)
# filter the data set to observations of interest
# get the number of observations
nrow(Marine6[Marine6$Year == 1970,])
# Store observation from 1970 to 2000 in M6_2000
M6_2000 <- Marine6[Marine6$Year <= 2000,]
summary(M6_2000$Year) # max should be 2000
# summary only of the subset of variables of interest
summary(Marine6[,c(1,2,8,10)])
# Using a for loop to create a new group
for(i in 1:nrow(Marine6))
{
if(Marine6$Common.Name[i] %in% c("American lobster","Rainbow star"))
{ Marine6$Group[i] = "Other" }
else if(is.na(Marine6$Common.Name[i]))
{ Marine6$Group[i] = NA }
else
{ Marine6$Group[i] = "Fish" }
}
Marine6$Group <- as.factor(Marine6$Group)
summary(Marine6$Group)
# What's the stadard deviation of [1,2,3]?
c(2,6,10) %>% var() %>% sqrt()
reticulate::repl_python()
library(knitr)
library(kableExtra)
# Create the data frame
compensation_table <- data.frame(
Name = c( "ticker", "salary", "bonus",
"stock_awards", "option_awards","non_equity_comp",
"pension_change","other_comp"
),
Description = c( "Stock ticker symbol for the company.",
"Base annual salary.", "Additional cash bonus.",
"Value of stock granted.", "Value of stock options granted.",
"Performance-based cash compensation not tied to equity.",
"Increase in pension value and deferred compensation earnings.",
"Miscellaneous compensation (e.g., perks, benefits)."
)
)
kable(compensation_table,
caption = "AFL-CIO Data Variable Descriptions",
booktabs = TRUE,
longtable = TRUE,
align = "l") %>%
kable_styling(latex_options = c("striped", "hold_position"))
library(knitr)
library(kableExtra)
# Create the data frame
compensation_table <- data.frame(
Name = c( "ticker", "salary", "bonus",
"stock_awards", "option_awards","non_equity_comp",
"pension_change","other_comp"
),
Description = c( "Stock ticker symbol for the company.",
"Base annual salary.", "Additional cash bonus.",
"Value of stock granted.", "Value of stock options granted.",
"Performance-based cash compensation not tied to equity.",
"Increase in pension value and deferred compensation earnings.",
"Miscellaneous compensation (e.g., perks, benefits)."
)
)
kable(compensation_table,
caption = "CEO Compensation Packages - Variable Descriptions (AFL-CIO)",
booktabs = TRUE,
longtable = TRUE,
align = "l") %>%
kable_styling(latex_options = c("striped", "hold_position"))
library(readr)
ceos <- read_csv("ceos.csv")
View(ceos)
reticulate::repl_python()
library(dplyr)
colnames(starwars)
reticulate::repl_python()
reticulate::repl_python()
colnames(Accidents)
hist(Accidents$LATITUDE)
hist(Accidents$LATITUDE, density=TRUE)
hist(Accidents$LATITUDE, freq=FALSE)
histogram(Accidents$LATITUDE)
library(lattice)
histogram(Accidents$LATITUDE)
hist(Accidents$LATITUDE, freq=FALSE)
histogram(Accidents$LATITUDE)
reticulate::repl_python()
