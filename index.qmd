# Introduction {.unnumbered}

<!-- 01 - The Project Components (Introduction) -->

<!-- 02 - Setting up your computer environment -->

<!-- 03 - Understanding Interface features -->

<!-- 04 - Getting Started with code -->

<!-- 05 - Finding a Dataset -->

<!-- 06 - Creating a Codebook -->

<!-- 07 - Data Science Programming Frameworks -->

<!-- 08 - Identifying a Data Investigation -->

<!-- 09 - Coding for Summaries & Descriptions -->

<!-- 10 - Data Moves & Data Processing -->

<!-- 11 - Visualizations, Trends, & Analyses -->

<!-- 12 - Big Picture Considerations -->

<!-- 13 - Advanced Features Appendix -->

::: callout-note
## Data Perspectives

What does it mean to be a data scientist? 

The answer to this question might depend on who you ask! Although data science applications may involve various disciplines (e.g., mathematics, statistics, computer science), skills (e.g., programming, visualizing), and roles (e.g., data analysis, software & tool development), certain processes transcend the many categorizations within this field. Furthermore, domain knowledge and data investigations of interest may come from humanitarian fields, social sciences, engineering, educational settings, and beyond. Thus, a data scientist may have multiple roles and focuses. 
::: 

## The Data Science Workflow

Rather than choosing a specific definition, you can think about data science from a process perspective. The following framework developed by Lee et al. [@lee2022investigating], is an example of how your data science process may unfold for a given project.

![Data Science Workflow Example](index_fig1.png)

Notice that the diagram represents the various data science processes in a non-linear way. Although the project you will pursue is structured through a sequence of milestones, it is common and often necessary to revisit prior stages of a data science workflow. For example, it may not be unusual to begin with data collection before framing a problem, and this may be driven by access to a particular data source. As explorations unfold, you might find the need to consider other angles of inquiry. On the other hand, questions of interest may drive the data collection process. 

As we explain later, your course project will begin with a pursuit based on your interest. You will find a dataset that is of interest to you and this will be the starting point for subsequently framing a data investigation (i.e., you will consider and gather data as the initial workflow step).

## Why R and Python?

So, why is this course focused on data science programming using R and Python?

For one reason why R and Python are important for data science, let's consider the latest Kaggle report [State of Data Science and Machine Learning - Kaggle 2022](https://www.kaggle.com/kaggle-survey-2022) that presents results from a survey of data science industry professionals from around the world. In this presentation, both Python and R are in the top three programming languages for data scientists. Furthermore, RStudio was used approximately by one in four data scientists and Jupyter Notebooks were used by over 9 out of 10 data scientists who responded to the survey. 

Since the time of this study, RStudio has integrated Python into its platform. In particular quarto files can contain both R and Python code, as well as other languages, and can render reports and presentations in many different common files types, such as pdfs, word documents, and powerpoint presentations among others.

So, R and Python are not only powerful and useful languages to accomplish a given data science tasks, but they are also widely used by professional practitioners. This is for good reason - both R and Python are often found to be the intuitive tool of choice. Furthermore, individuals from all fields of study and professions desiring to derive reproducible insights from data should feel confident that the tools that are within their grasp are the industry standards.

## Course outcomes

Our goal in creating this book is to provide you with a resource to guide your R and Python programming skill acquisition through a data-centric project-based approach. A fundamental idea behind this approach involves facilitating your agency in continued data science learning and up-skilling. So, you will not only learn to program in R and Python, but you will also be able to extend your learning in a self-directed capacity with a broader data science workflow in mind.

The purpose of this book is to provide material for you to increase your knowledge and comfort with programming in R and Python through relevant and applied data explorations and a real world data investigation experience. The R and Python for data science skills that you will acquire will be utilized to create a data science project. 

Applied data science may involve goal-oriented steps that help to move projects towards a certain or desired outcome. In the next chapter we present project development steps from this applied focus. We also include big picture considerations that can transcend a given data science project. Of course, since we are learning programming for data science through an application, we need data! And before that, we need to setup our environment in such a way to help us organize our processes and files in service of our investigation of interest.

### How will we use this book?

This book will be used as a course preview, review, and supplement to the material that will be covered in the class. Suggested readings will be provided, typically, in corresponding sequence with this resource. This book will be used as a guide to the course project and overall course objectives in addition to related big picture data science considerations.

## Setting up your environment

### Installing RStudio

People interested in using R on their local devices can download the latest version of the language through the Comprehensive R Archive Network (CRAN) at [The R Project for Statistical Computing Website](https://www.r-project.org/).

### The RStudio IDE

RStudio is an integrated development environment (IDE). As an IDE, RStudio provides a way to create & edit code, render presentations, connect with version control platforms and more. 

Let's look at the default layout and the RStudio desktop features that will help us build our data science workflows as we learn the R programming language.

![RStudio desktop](index_fig2.png)

In the image above, there are four main windows. The upper left is the Source window where you can open various files to write, manage, and save your code. Notice that there is an "Untitled1" tab in this window, which is an unnamed R Script - a basic file type that allows you to write and manage your code. In an R script we might read in data and write code to gather information about the data, such as the size of the dataset and the column names. R uses certain colors to delineate different aspects of your code (e.g., distinguishing "comments" from executable code).   

Beneath the Source window is the Console. The console displays the code that is run and the results of the code that is run. You can also type code directly into the console and even save different objects to memory from this window. However, the console does not save or retain your code once you have ended your R session, as where R Scripts and other file types managed through the Source window are designed for this purpose.

The window on the top right contains many tabs, including the Environment tab. The Environment tab provides information on the objects, or accessible elements, in your session's memory. Other tabs in the window may include the History tab, and perhaps a tab that interfaces with version control platforms (e.g., GitHub).

The final window, in the bottom right, also contains many tabs. The `Files` tab provides information about your current working directory and the files that exist within that working directory. The Plots tab can display features such as graphs generated from code (e.g., a scatterplot). In the image above, the information displayed in the bottom right window is from a call to the Help feature which has been done through the line of code that reads `?rbinom`. The contents appear under the corresponding Help tab.

Your RStudio view is customizable through the Pane Layout options. For the purposes of this course, the default display will work well. Our focus will mainly be on the Source/Editor and the Console. We may reference the Files tab, the Help feature, and display plots within the Plot window; and we may investigate information within the Environment. However, these useful features support our data science workflow which will mainly be captured within our editor.

In this section, we introduced a lot of vocabulary without detailed explanation. As you move through the course we expect that all of the information referenced here will be clear to you and encourage you to look back at this section, in particular, and the accompanying image as a reflection of your progress. You will be able to describe all that appears in the visual!

### Setting up your course workspace (R projects)

Organization is a fundamental part of a project workflow. For our project, we can leverage the computer's folder system to efficiently and effectively store and access our course materials. Given that we are working in RStudio, we can do this by setting up an R project.

An R project is a directory that can contain all of your files related to an analysis, for example. This may be datasets, images, scripts, output and more. For our course, the R project we create will be used to keep track of your course materials and assignments. The R project space we will create will be your organizational space that points to what you are doing in this course.

When you set up your R project you will create a folder on your computer and new documents that you add to that folder will be a part of the files in your R project environment. Conversely, files that you create in your R project session will be added to the corresponding computer folder by default. 

![Files Window](index_fig3.png)

::: callout-caution
## The Files Window

Note that the *Files* tab/window is an interface to your computer files, so modifying files through this window correspondingly modifies the files on your computer, outside of R.
:::
